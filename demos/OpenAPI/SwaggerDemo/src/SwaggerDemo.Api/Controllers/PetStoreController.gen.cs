//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Microsoft.AspNetCore.Authorization;

namespace SwaggerDemo.Api
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0))")]
    public interface IApiController
    {
        /// <summary>Add a new pet to the store</summary>
        /// <param name="body">Pet object that needs to be added to the store</param>
        System.Threading.Tasks.Task PetPostAsync(Pet body);
    
        /// <summary>Update an existing pet</summary>
        /// <param name="body">Pet object that needs to be added to the store</param>
        System.Threading.Tasks.Task PetPutAsync(Pet body);
    
        /// <summary>Find pet by ID</summary>
        /// <param name="petId">ID of pet to return</param>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task<Pet> PetGetAsync(long petId);
    
        /// <summary>Updates a pet in the store with form data</summary>
        /// <param name="petId">ID of pet that needs to be updated</param>
        /// <param name="name">Updated name of the pet</param>
        /// <param name="status">Updated status of the pet</param>
        System.Threading.Tasks.Task PetPostAsync(long petId, string name, string status);
    
        /// <summary>Deletes a pet</summary>
        /// <param name="petId">Pet id to delete</param>
        System.Threading.Tasks.Task PetDeleteAsync(string api_key, long petId);
    
        /// <summary>Create user</summary>
        /// <param name="body">Created user object</param>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task UserPostAsync(User body);
    
        /// <summary>Get user by user name</summary>
        /// <param name="username">The name that needs to be fetched. Use user1 for testing.</param>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task<User> UserGetAsync(string username);
    
        /// <summary>Updated user</summary>
        /// <param name="username">name that need to be updated</param>
        /// <param name="body">Updated user object</param>
        System.Threading.Tasks.Task UserPutAsync(string username, User body);
    
        /// <summary>Delete user</summary>
        /// <param name="username">The name that needs to be deleted</param>
        System.Threading.Tasks.Task UserDeleteAsync(string username);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("api/v1")]
    [Authorize]
    public partial class ApiController : Microsoft.AspNetCore.Mvc.Controller 
    {
        private IApiController _implementation; 
    
        public ApiController(IApiController implementation)
        {
            _implementation = implementation; 
        }
    
        /// <summary>Add a new pet to the store</summary>
        /// <param name="body">Pet object that needs to be added to the store</param>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("pet")]
        public System.Threading.Tasks.Task PetPost(Pet body)
        {    
            return _implementation.PetPostAsync(body);
        }
    
        /// <summary>Update an existing pet</summary>
        /// <param name="body">Pet object that needs to be added to the store</param>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("pet")]
        public System.Threading.Tasks.Task PetPut(Pet body)
        {    
            return _implementation.PetPutAsync(body);
        }
    
        /// <summary>Find pet by ID</summary>
        /// <param name="petId">ID of pet to return</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("pet/{petId}")]
        public System.Threading.Tasks.Task<Pet> PetGet(long petId)
        {    
            return _implementation.PetGetAsync(petId);
        }
    
        /// <summary>Updates a pet in the store with form data</summary>
        /// <param name="petId">ID of pet that needs to be updated</param>
        /// <param name="name">Updated name of the pet</param>
        /// <param name="status">Updated status of the pet</param>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("pet/{petId}")]
        public System.Threading.Tasks.Task PetPost(long petId, string name, string status)
        {    
            return _implementation.PetPostAsync(petId, name, status);
        }
    
        /// <summary>Deletes a pet</summary>
        /// <param name="petId">Pet id to delete</param>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("pet/{petId}")]
        public System.Threading.Tasks.Task PetDelete(string api_key, long petId)
        {    
            return _implementation.PetDeleteAsync(api_key, petId);
        }
    
        /// <summary>Create user</summary>
        /// <param name="body">Created user object</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("user")]
        public System.Threading.Tasks.Task UserPost(User body)
        {    
            return _implementation.UserPostAsync(body);
        }
    
        /// <summary>Get user by user name</summary>
        /// <param name="username">The name that needs to be fetched. Use user1 for testing.</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("user/{username}")]
        public System.Threading.Tasks.Task<User> UserGet(string username)
        {    
            return _implementation.UserGetAsync(username);
        }
    
        /// <summary>Updated user</summary>
        /// <param name="username">name that need to be updated</param>
        /// <param name="body">Updated user object</param>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("user/{username}")]
        public System.Threading.Tasks.Task UserPut(string username, User body)
        {    
            return _implementation.UserPutAsync(username, body);
        }
    
        /// <summary>Delete user</summary>
        /// <param name="username">The name that needs to be deleted</param>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("user/{username}")]
        public System.Threading.Tasks.Task UserDelete(string username)
        {    
            return _implementation.UserDeleteAsync(username);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0))")]
    public interface IPetApiController
    {
        /// <summary>Finds Pets by status</summary>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Pet>> FindByStatusAsync(System.Collections.Generic.IEnumerable<Anonymous> status);
    
        /// <summary>Finds Pets by tags</summary>
        /// <param name="tags">Tags to filter by</param>
        /// <returns>successful operation</returns>
        [System.Obsolete]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Pet>> FindByTagsAsync(System.Collections.Generic.IEnumerable<string> tags);
    
        /// <summary>uploads an image</summary>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="additionalMetadata">Additional data to pass to server</param>
        /// <param name="file">file to upload</param>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task<ApiResponse> UploadImageAsync(long petId, string additionalMetadata, FileParameter file);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("api/v1")]
    [Authorize]
    public partial class PetApiController : Microsoft.AspNetCore.Mvc.Controller 
    {
        private IPetApiController _implementation; 
    
        public PetApiController(IPetApiController implementation)
        {
            _implementation = implementation; 
        }
    
        /// <summary>Finds Pets by status</summary>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("pet/findByStatus")]
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Pet>> FindByStatus(System.Collections.Generic.IEnumerable<Anonymous> status)
        {    
            return _implementation.FindByStatusAsync(status);
        }
    
        /// <summary>Finds Pets by tags</summary>
        /// <param name="tags">Tags to filter by</param>
        /// <returns>successful operation</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("pet/findByTags")]
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Pet>> FindByTags(System.Collections.Generic.IEnumerable<string> tags)
        {    
            return _implementation.FindByTagsAsync(tags);
        }
    
        /// <summary>uploads an image</summary>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="additionalMetadata">Additional data to pass to server</param>
        /// <param name="file">file to upload</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("pet/{petId}/uploadImage")]
        public System.Threading.Tasks.Task<ApiResponse> UploadImage(long petId, string additionalMetadata, FileParameter file)
        {    
            return _implementation.UploadImageAsync(petId, additionalMetadata, file);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0))")]
    public interface IStoreApiController
    {
        /// <summary>Returns pet inventories by status</summary>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> InventoryAsync();
    
        /// <summary>Place an order for a pet</summary>
        /// <param name="body">order placed for purchasing the pet</param>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task<Order> OrderPostAsync(Order body);
    
        /// <summary>Find purchase order by ID</summary>
        /// <param name="orderId">ID of pet that needs to be fetched</param>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task<Order> OrderGetAsync(long orderId);
    
        /// <summary>Delete purchase order by ID</summary>
        /// <param name="orderId">ID of the order that needs to be deleted</param>
        System.Threading.Tasks.Task OrderDeleteAsync(long orderId);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("api/v1")]
    public partial class StoreApiController : Microsoft.AspNetCore.Mvc.Controller 
    {
        private IStoreApiController _implementation; 
    
        public StoreApiController(IStoreApiController implementation)
        {
            _implementation = implementation; 
        }
    
        /// <summary>Returns pet inventories by status</summary>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("store/inventory")]
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> Inventory()
        {    
            return _implementation.InventoryAsync();
        }
    
        /// <summary>Place an order for a pet</summary>
        /// <param name="body">order placed for purchasing the pet</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("store/order")]
        public System.Threading.Tasks.Task<Order> OrderPost(Order body)
        {    
            return _implementation.OrderPostAsync(body);
        }
    
        /// <summary>Find purchase order by ID</summary>
        /// <param name="orderId">ID of pet that needs to be fetched</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("store/order/{orderId}")]
        public System.Threading.Tasks.Task<Order> OrderGet(long orderId)
        {    
            return _implementation.OrderGetAsync(orderId);
        }
    
        /// <summary>Delete purchase order by ID</summary>
        /// <param name="orderId">ID of the order that needs to be deleted</param>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("store/order/{orderId}")]
        public System.Threading.Tasks.Task OrderDelete(long orderId)
        {    
            return _implementation.OrderDeleteAsync(orderId);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0))")]
    public interface IUserApiController
    {
        /// <summary>Creates list of users with given input array</summary>
        /// <param name="body">List of user object</param>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task CreateWithArrayAsync(System.Collections.Generic.IEnumerable<User> body);
    
        /// <summary>Creates list of users with given input array</summary>
        /// <param name="body">List of user object</param>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task CreateWithListAsync(System.Collections.Generic.IEnumerable<User> body);
    
        /// <summary>Logs user into the system</summary>
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
    
        /// <summary>Logs out current logged in user session</summary>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task LogoutAsync();
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("api/v1")]
    public partial class UserApiController : Microsoft.AspNetCore.Mvc.Controller 
    {
        private IUserApiController _implementation; 
    
        public UserApiController(IUserApiController implementation)
        {
            _implementation = implementation; 
        }
    
        /// <summary>Creates list of users with given input array</summary>
        /// <param name="body">List of user object</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("user/createWithArray")]
        public System.Threading.Tasks.Task CreateWithArray(System.Collections.Generic.IEnumerable<User> body)
        {    
            return _implementation.CreateWithArrayAsync(body);
        }
    
        /// <summary>Creates list of users with given input array</summary>
        /// <param name="body">List of user object</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("user/createWithList")]
        public System.Threading.Tasks.Task CreateWithList(System.Collections.Generic.IEnumerable<User> body)
        {    
            return _implementation.CreateWithListAsync(body);
        }
    
        /// <summary>Logs user into the system</summary>
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("user/login")]
        public System.Threading.Tasks.Task<string> Login(string username, string password)
        {    
            return _implementation.LoginAsync(username, password);
        }
    
        /// <summary>Logs out current logged in user session</summary>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("user/logout")]
        public System.Threading.Tasks.Task Logout()
        {    
            return _implementation.LogoutAsync();
        }
    
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Order 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("petId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? PetId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ShipDate { get; set; }
    
        /// <summary>Order Status</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderStatus? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("complete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Complete { get; set; } = false;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Order FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Order>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Category 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Category FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Category>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class User 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        /// <summary>User Status</summary>
        [Newtonsoft.Json.JsonProperty("userStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UserStatus { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Tag 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tag FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tag>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Pet 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Category Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("photoUrls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<string> PhotoUrls { get; set; } = new System.Collections.Generic.List<string>();
    
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Tag> Tags { get; set; }
    
        /// <summary>pet status in the store</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PetStatus? Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Pet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pet>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ApiResponse 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ApiResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiResponse>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous
    {
        [System.Runtime.Serialization.EnumMember(Value = "available")]
        Available = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "pending")]
        Pending = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "sold")]
        Sold = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OrderStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "placed")]
        Placed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "approved")]
        Approved = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "delivered")]
        Delivered = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "available")]
        Available = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "pending")]
        Pending = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "sold")]
        Sold = 2,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data) 
            : this (data, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
        {
            Data = data;
            FileName = fileName;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }
    }

}